return {
    -- NOTE: This is currently disabled until LSP-Zero will be replaced with it
    -- {
    --     'williamboman/mason.nvim',
    --     build = ':MasonUpdate', -- :MasonUpdate updates registry contents
    --     config = function()
    --         require('mason').setup({})
    --     end
    -- },
    -- {
    --     'williamboman/mason-lspconfig.nvim',
    --     config = function()
    --         require('mason-lspconfig').setup({
    --             -- A list of servers to automatically install if they're not already installed. Example: { "rust_analyzer@nightly", "lua_ls" }
    --             -- This setting has no relation with the `automatic_installation` setting.
    --             ensure_installed = { 'lua_ls', 'omnisharp', 'html', 'angularls', 'lemminx' },
    --             -- Whether servers that are set up (via lspconfig) should be automatically installed if they're not already installed.
    --             -- This setting has no relation with the `ensure_installed` setting.
    --             -- Can either be:
    --             --   - false: Servers are not automatically installed.
    --             --   - true: All servers set up via lspconfig are automatically installed.
    --             --   - { exclude: string[] }: All servers set up via lspconfig, except the ones provided in the list, are automatically installed.
    --             --       Example: automatic_installation = { exclude = { "rust_analyzer", "solargraph" } }
    --             automatic_installation = false,
    --         })
    --     end
    -- },
    -- {
    --     'neovim/nvim-lspconfig',
    --     config = function()
    --         require('lspconfig').lua_ls.setup({})
    --         require('lspconfig').omnisharp.setup({})
    --         require('lspconfig').angularls.setup({})
    --
    --         -- Global mappings.
    --         -- See `:help vim.diagnostic.*` for documentation on any of the below functions
    --         vim.keymap.set('n', '<leader>vd', vim.diagnostic.open_float)
    --         vim.keymap.set('n', '[d', vim.diagnostic.goto_prev)
    --         vim.keymap.set('n', ']d', vim.diagnostic.goto_next)
    --         vim.keymap.set('n', '<leader>q', vim.diagnostic.setloclist)
    --
    --         -- Use LspAttach autocommand to only map the following keys
    --         -- after the language server attaches to the current buffer
    --         vim.api.nvim_create_autocmd('LspAttach', {
    --             group = vim.api.nvim_create_augroup('UserLspConfig', {}),
    --             callback = function(ev)
    --                 -- Enable completion triggered by <c-x><c-o>
    --                 vim.bo[ev.buf].omnifunc = 'v:lua.vim.lsp.omnifunc'
    --
    --                 -- Buffer local mappings.
    --                 -- See `:help vim.lsp.*` for documentation on any of the below functions
    --                 local opts = { buffer = ev.buf }
    --                 vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)
    --                 vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)
    --                 vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, opts)
    --                 vim.keymap.set('n', '<leader>wa', vim.lsp.buf.add_workspace_folder, opts)
    --                 vim.keymap.set('n', '<leader>wr', vim.lsp.buf.remove_workspace_folder, opts)
    --                 vim.keymap.set('n', '<leader>wl', function()
    --                     print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
    --                 end, opts)
    --                 vim.keymap.set('n', '<leader>D', vim.lsp.buf.type_definition, opts)
    --                 vim.keymap.set('n', '<leader>rn', vim.lsp.buf.rename, opts)
    --                 vim.keymap.set('n', '<leader>ca', vim.lsp.buf.code_action, opts)
    --
    --                 -- NOTE: This is disabled because for this telescope is used
    --                 -- vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)
    --                 -- vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)
    --                 -- vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)
    --
    --                 vim.keymap.set('n', '<leader>f', function()
    --                     vim.lsp.buf.format { async = true }
    --                 end, opts)
    --             end,
    --         })
    --     end,
    -- },
    -- {
    --     'hrsh7th/nvim-cmp',
    --     dependencies = {
    --         'L3MON4D3/LuaSnip',
    --         'saadparwaiz1/cmp_luasnip',
    --         'hrsh7th/cmp-nvim-lsp'
    --     },
    --     config = function()
    --         local cmp = require('cmp')
    --         cmp.setup({
    --             snippet = {
    --                 -- REQUIRED - you must specify a snippet engine
    --                 expand = function(args)
    --                     -- vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
    --                     require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
    --                     -- require('snippy').expand_snippet(args.body) -- For `snippy` users.
    --                     -- vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
    --                 end,
    --             },
    --             window = {
    --                 -- completion = cmp.config.window.bordered(),
    --                 -- documentation = cmp.config.window.bordered(),
    --             },
    --             mapping = cmp.mapping.preset.insert({
    --                 ['<C-b>'] = cmp.mapping.scroll_docs(-4),
    --                 ['<C-f>'] = cmp.mapping.scroll_docs(4),
    --                 ['<C-Space>'] = cmp.mapping.complete(),
    --                 ['<C-e>'] = cmp.mapping.abort(),
    --                 ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
    --             }),
    --             sources = cmp.config.sources({
    --                 { name = 'nvim_lsp' },
    --                 -- { name = 'vsnip' }, -- For vsnip users.
    --                 { name = 'luasnip' }, -- For luasnip users.
    --                 -- { name = 'ultisnips' }, -- For ultisnips users.
    --                 -- { name = 'snippy' }, -- For snippy users.
    --             }, {
    --                 { name = 'buffer' },
    --             })
    --         })
    --
    --         -- Set up lspconfig.
    --         local capabilities = require('cmp_nvim_lsp').default_capabilities()
    --         -- Replace <YOUR_LSP_SERVER> with each lsp server you've enabled.
    --         require('lspconfig')['luals'].setup {
    --             capabilities = capabilities
    --         }
    --     end
    -- }
}
